// <auto-generated />
using System;
using FOV.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FOV.Infrastructure.Migrations
{
    [DbContext(typeof(FOVContext))]
    [Migration("20241204141810_WaiterSalary")]
    partial class WaiterSalary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FOV.Domain.Entities.AttendanceAggregator.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WaiterScheduleId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("FOV.Domain.Entities.ComboAggregator.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ComboDescription")
                        .HasColumnType("text");

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("ComboStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("PercentReduce")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("FOV.Domain.Entities.ComboAggregator.DishCombo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishId");

                    b.ToTable("DishCombos");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6535596e-a86a-4fcc-97e7-7e6182a5c011"),
                            CategoryName = "Khai Vị",
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = new Guid("3140b8af-2124-44fa-8f43-907cddc26c3d"),
                            CategoryName = "Món Chính",
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("DishGeneralId")
                        .HasColumnType("uuid");

                    b.Property<byte>("DishType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<byte>("PriorityDish")
                        .HasColumnType("smallint");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DishGeneralId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.DishIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.RefundDishInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DishId")
                        .IsUnique();

                    b.ToTable("RefundDishInventories");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.RefundDishInventoryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RefundDishInventoryId")
                        .HasColumnType("uuid");

                    b.Property<byte>("RefundDishInventoryTransactionType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("RefundDishInventoryId");

                    b.ToTable("RefundDishInventoryTransactions");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishGeneralAggregator.DishGeneral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DishDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DishGeneralParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("DishImageDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("PercentagePriceDifference")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DishGeneralParentId");

                    b.ToTable("DishGenerals");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishGeneralAggregator.DishGeneralImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("DishGeneralId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DishGeneralId");

                    b.ToTable("DishGeneralImages");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishGeneralAggregator.DishIngredientGeneral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DishGeneralId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientGeneralId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DishGeneralId");

                    b.HasIndex("IngredientGeneralId");

                    b.ToTable("DishIngredientGenerals");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ExpiredQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("IngredientAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("IngredientGeneralId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IngredientTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IngredientGeneralId");

                    b.HasIndex("IngredientTypeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.IngredientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("IngredientDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ccc9ec6-6b72-4467-aaeb-1e45dc0540a7"),
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            IngredientDescription = "",
                            IngredientName = "Rau",
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = new Guid("b8f66bab-13c9-4390-8582-545ddc7d2ec8"),
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            IngredientDescription = "",
                            IngredientName = "Nguyên liệt ngắn hạn",
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.IngredientUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IngredientUnitParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("IngredientUnitParentId");

                    b.ToTable("IngredientUnits");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.IngredientUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderdDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("IngredientTransactions");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientGeneral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("IngredientDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IngredientMeasureId")
                        .HasColumnType("uuid");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IngredientTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IngredientMeasureId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("IngredientGenerals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ccc9ec6-6b72-4467-aaeb-1e45dc0540a8"),
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            IngredientDescription = "Can last 6 months to a year or more if kept in a cool, dry place.",
                            IngredientMeasureId = new Guid("6531296e-a86a-4fcc-97e7-7e6182a5c011"),
                            IngredientName = "Rice",
                            IngredientTypeId = new Guid("9ccc9ec6-6b72-4467-aaeb-1e45dc0540a7"),
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = new Guid("9ccc9ec6-6b72-4467-aaeb-1e45dc0540a0"),
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            IngredientDescription = "Typically lasts 1-2 years when stored in an airtight container..",
                            IngredientMeasureId = new Guid("6531296e-a86a-4fcc-97e7-7e6182a5c011"),
                            IngredientName = "Pasta",
                            IngredientTypeId = new Guid("9ccc9ec6-6b72-4467-aaeb-1e45dc0540a7"),
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = new Guid("9ccc9ec6-6b72-4467-aaeb-1e45dc0540b0"),
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            IngredientDescription = "Typically lasts 1-2 years when stored in an airtight container..",
                            IngredientMeasureId = new Guid("6531296e-a86a-4fcc-97e7-7e6182a5c011"),
                            IngredientName = "Spinach",
                            IngredientTypeId = new Guid("b8f66bab-13c9-4390-8582-545ddc7d2ec8"),
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("IngredientMeasureName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IngredientMeasures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6531296e-a86a-4fcc-97e7-7e6182a5c011"),
                            Created = new DateTime(2024, 12, 4, 14, 18, 9, 295, DateTimeKind.Utc).AddTicks(6410),
                            IngredientMeasureName = "gam",
                            LastModified = new DateTime(2024, 12, 4, 14, 18, 9, 295, DateTimeKind.Utc).AddTicks(6412)
                        },
                        new
                        {
                            Id = new Guid("6531296e-a86a-4fcc-97e7-7e6192a5c011"),
                            Created = new DateTime(2024, 12, 4, 14, 18, 9, 295, DateTimeKind.Utc).AddTicks(6421),
                            IngredientMeasureName = "ml",
                            LastModified = new DateTime(2024, 12, 4, 14, 18, 9, 295, DateTimeKind.Utc).AddTicks(6421)
                        });
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientSupplyRequestAggregator.IngredientSupplyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("IngredientSupplyRequests");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientSupplyRequestAggregator.IngredientSupplyRequestDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientSupplyRequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("IngredientSupplyRequestId");

                    b.ToTable("IngredientSupplyRequestDetails");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<byte?>("OrderStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte?>("OrderType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsAddMore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RefundQuantity")
                        .HasColumnType("integer");

                    b.Property<byte?>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.OrderResponsibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("OrderResponsibilityType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderResponsibility");
                });

            modelBuilder.Entity("FOV.Domain.Entities.PaymentAggregator.Payments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("PaymentMethods")
                        .HasColumnType("smallint");

                    b.Property<byte>("PaymentStatus")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ReduceAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("VnpTxnRef")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FOV.Domain.Entities.RestaurantAggregator.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RestaurantCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RestaurantPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ffc9ec6-6b72-4467-aaeb-1e45dc0540b0"),
                            Address = "Go Vap",
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Latitude = 0.0,
                            Longitude = 0.0,
                            ReleaseDate = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            RestaurantCode = "RE_001",
                            RestaurantName = "Default Restaurant",
                            RestaurantPhone = "0902388123",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = new Guid("d42cf3c6-cbe4-4431-ac91-9eae870fa007"),
                            Address = "Thu Duc",
                            Created = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModified = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Latitude = 0.0,
                            Longitude = 0.0,
                            ReleaseDate = new DateTime(2002, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            RestaurantCode = "RE_002",
                            RestaurantName = "Vege Thu Duc",
                            RestaurantPhone = "0867960120",
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("FOV.Domain.Entities.ShiftAggregator.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ShiftName")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("interval");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("FOV.Domain.Entities.ShiftAggregator.ShiftRestaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftRestaurant");
                });

            modelBuilder.Entity("FOV.Domain.Entities.TableAggregator.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsLogin")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TableCode")
                        .HasColumnType("text");

                    b.Property<int>("TableNumber")
                        .HasColumnType("integer");

                    b.Property<string>("TableQRCode")
                        .HasColumnType("text");

                    b.Property<byte>("TableStatus")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("FOV.Domain.Entities.UserAggregator.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("RoleSalary")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FOV.Domain.Entities.UserAggregator.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FOV.Domain.Entities.UserAggregator.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RestaurantId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FOV.Domain.Entities.WaiterSalaryAggregator.Salary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("SalaryType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Salary");
                });

            modelBuilder.Entity("FOV.Domain.Entities.WaiterSalaryAggregator.WaiterSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualHoursWorked")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("OvertimeSalary")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Penalty")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RegularSalary")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("SalaryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalHoursWorked")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalSalaries")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalShifts")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SalaryId");

                    b.HasIndex("UserId");

                    b.ToTable("WaiterSalary");
                });

            modelBuilder.Entity("FOV.Domain.Entities.WaiterScheduleAggregator.WaiterSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateTime")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("WaiterSchedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FOV.Domain.Entities.AttendanceAggregator.Attendance", b =>
                {
                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", null)
                        .WithMany("Attendances")
                        .HasForeignKey("UserId");

                    b.HasOne("FOV.Domain.Entities.WaiterScheduleAggregator.WaiterSchedule", "WaiterSchedule")
                        .WithMany("Attendances")
                        .HasForeignKey("WaiterScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaiterSchedule");
                });

            modelBuilder.Entity("FOV.Domain.Entities.ComboAggregator.Combo", b =>
                {
                    b.HasOne("FOV.Domain.Entities.RestaurantAggregator.Restaurant", "Restaurant")
                        .WithMany("Combos")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FOV.Domain.Entities.ComboAggregator.DishCombo", b =>
                {
                    b.HasOne("FOV.Domain.Entities.ComboAggregator.Combo", "Combo")
                        .WithMany("DishCombos")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.DishAggregator.Dish", "Dish")
                        .WithMany("DishCombos")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.Dish", b =>
                {
                    b.HasOne("FOV.Domain.Entities.DishAggregator.Category", "Category")
                        .WithMany("Dishes")
                        .HasForeignKey("CategoryId");

                    b.HasOne("FOV.Domain.Entities.DishGeneralAggregator.DishGeneral", "DishGeneral")
                        .WithMany("Dishes")
                        .HasForeignKey("DishGeneralId");

                    b.HasOne("FOV.Domain.Entities.RestaurantAggregator.Restaurant", "Restaurant")
                        .WithMany("Dishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DishGeneral");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.DishIngredient", b =>
                {
                    b.HasOne("FOV.Domain.Entities.DishAggregator.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.IngredientAggregator.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.RefundDishInventory", b =>
                {
                    b.HasOne("FOV.Domain.Entities.DishAggregator.Dish", "Dish")
                        .WithOne("RefundDishInventory")
                        .HasForeignKey("FOV.Domain.Entities.DishAggregator.RefundDishInventory", "DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.RefundDishInventoryTransaction", b =>
                {
                    b.HasOne("FOV.Domain.Entities.OrderAggregator.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("FOV.Domain.Entities.DishAggregator.RefundDishInventory", "RefundDishInventory")
                        .WithMany("Transaction")
                        .HasForeignKey("RefundDishInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RefundDishInventory");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishGeneralAggregator.DishGeneral", b =>
                {
                    b.HasOne("FOV.Domain.Entities.DishAggregator.Category", "Category")
                        .WithMany("DishGenerals")
                        .HasForeignKey("CategoryId");

                    b.HasOne("FOV.Domain.Entities.DishGeneralAggregator.DishGeneral", "DishGeneralParent")
                        .WithMany("ChildDishGenerals")
                        .HasForeignKey("DishGeneralParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("DishGeneralParent");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishGeneralAggregator.DishGeneralImage", b =>
                {
                    b.HasOne("FOV.Domain.Entities.DishGeneralAggregator.DishGeneral", "DishGeneral")
                        .WithMany("DishGeneralImages")
                        .HasForeignKey("DishGeneralId");

                    b.Navigation("DishGeneral");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishGeneralAggregator.DishIngredientGeneral", b =>
                {
                    b.HasOne("FOV.Domain.Entities.DishGeneralAggregator.DishGeneral", "DishGeneral")
                        .WithMany("Ingredients")
                        .HasForeignKey("DishGeneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientGeneral", "IngredientGeneral")
                        .WithMany("DishIngredientGenerals")
                        .HasForeignKey("IngredientGeneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DishGeneral");

                    b.Navigation("IngredientGeneral");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.Ingredient", b =>
                {
                    b.HasOne("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientGeneral", "IngredientGeneral")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientGeneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.IngredientAggregator.IngredientType", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeId");

                    b.HasOne("FOV.Domain.Entities.RestaurantAggregator.Restaurant", "Restaurant")
                        .WithMany("Ingredients")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("IngredientGeneral");

                    b.Navigation("IngredientType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.IngredientUnit", b =>
                {
                    b.HasOne("FOV.Domain.Entities.IngredientAggregator.Ingredient", "Ingredient")
                        .WithMany("IngredientUnits")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.IngredientAggregator.IngredientUnit", "IngredientUnitParent")
                        .WithMany("ChildUnits")
                        .HasForeignKey("IngredientUnitParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientUnitParent");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.IngredientUsage", b =>
                {
                    b.HasOne("FOV.Domain.Entities.IngredientAggregator.Ingredient", "Ingredient")
                        .WithMany("IngredientTransactions")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.OrderAggregator.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId");

                    b.HasOne("FOV.Domain.Entities.OrderAggregator.Order", null)
                        .WithMany("IngredientTransactions")
                        .HasForeignKey("OrderId");

                    b.Navigation("Ingredient");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientGeneral", b =>
                {
                    b.HasOne("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientMeasure", "IngredientMeasure")
                        .WithMany("IngredientGenerals")
                        .HasForeignKey("IngredientMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.IngredientAggregator.IngredientType", "IngredientType")
                        .WithMany("IngredientGenerals")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientMeasure");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientSupplyRequestAggregator.IngredientSupplyRequest", b =>
                {
                    b.HasOne("FOV.Domain.Entities.RestaurantAggregator.Restaurant", "Restaurant")
                        .WithMany("IngredientSupplyRequests")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientSupplyRequestAggregator.IngredientSupplyRequestDetail", b =>
                {
                    b.HasOne("FOV.Domain.Entities.IngredientAggregator.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.IngredientSupplyRequestAggregator.IngredientSupplyRequest", "IngredientSupplyRequest")
                        .WithMany("IngredientSupplyRequestDetails")
                        .HasForeignKey("IngredientSupplyRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientSupplyRequest");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.HasOne("FOV.Domain.Entities.UserAggregator.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("FOV.Domain.Entities.TableAggregator.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.OrderDetail", b =>
                {
                    b.HasOne("FOV.Domain.Entities.ComboAggregator.Combo", "Combo")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ComboId");

                    b.HasOne("FOV.Domain.Entities.OrderAggregator.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("FOV.Domain.Entities.DishAggregator.Dish", "Dish")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Combo");

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.OrderResponsibility", b =>
                {
                    b.HasOne("FOV.Domain.Entities.OrderAggregator.OrderDetail", "OrderDetail")
                        .WithMany("OrderResponsibilities")
                        .HasForeignKey("OrderDetailId");

                    b.HasOne("FOV.Domain.Entities.OrderAggregator.Order", "Order")
                        .WithMany("OrderResponsibilities")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("FOV.Domain.Entities.PaymentAggregator.Payments", b =>
                {
                    b.HasOne("FOV.Domain.Entities.OrderAggregator.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FOV.Domain.Entities.ShiftAggregator.ShiftRestaurant", b =>
                {
                    b.HasOne("FOV.Domain.Entities.RestaurantAggregator.Restaurant", "Restaurant")
                        .WithMany("ShiftRestaurants")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("FOV.Domain.Entities.ShiftAggregator.Shift", "Shift")
                        .WithMany("ShiftRestaurants")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Restaurant");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("FOV.Domain.Entities.TableAggregator.Table", b =>
                {
                    b.HasOne("FOV.Domain.Entities.RestaurantAggregator.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FOV.Domain.Entities.UserAggregator.User", b =>
                {
                    b.HasOne("FOV.Domain.Entities.RestaurantAggregator.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FOV.Domain.Entities.WaiterSalaryAggregator.WaiterSalary", b =>
                {
                    b.HasOne("FOV.Domain.Entities.WaiterSalaryAggregator.Salary", "Salary")
                        .WithMany("WaiterSalaries")
                        .HasForeignKey("SalaryId");

                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", "User")
                        .WithMany("WaiterSalaries")
                        .HasForeignKey("UserId");

                    b.Navigation("Salary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FOV.Domain.Entities.WaiterScheduleAggregator.WaiterSchedule", b =>
                {
                    b.HasOne("FOV.Domain.Entities.ShiftAggregator.Shift", "Shift")
                        .WithMany("WaiterSchedules")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", "User")
                        .WithMany("WaiterSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FOV.Domain.Entities.UserAggregator.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FOV.Domain.Entities.UserAggregator.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FOV.Domain.Entities.UserAggregator.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FOV.Domain.Entities.ComboAggregator.Combo", b =>
                {
                    b.Navigation("DishCombos");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.Category", b =>
                {
                    b.Navigation("DishGenerals");

                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.Dish", b =>
                {
                    b.Navigation("DishCombos");

                    b.Navigation("DishIngredients");

                    b.Navigation("OrderDetails");

                    b.Navigation("RefundDishInventory");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishAggregator.RefundDishInventory", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("FOV.Domain.Entities.DishGeneralAggregator.DishGeneral", b =>
                {
                    b.Navigation("ChildDishGenerals");

                    b.Navigation("DishGeneralImages");

                    b.Navigation("Dishes");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.Ingredient", b =>
                {
                    b.Navigation("IngredientTransactions");

                    b.Navigation("IngredientUnits");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.IngredientType", b =>
                {
                    b.Navigation("IngredientGenerals");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientAggregator.IngredientUnit", b =>
                {
                    b.Navigation("ChildUnits");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientGeneral", b =>
                {
                    b.Navigation("DishIngredientGenerals");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientGeneralAggregator.IngredientMeasure", b =>
                {
                    b.Navigation("IngredientGenerals");
                });

            modelBuilder.Entity("FOV.Domain.Entities.IngredientSupplyRequestAggregator.IngredientSupplyRequest", b =>
                {
                    b.Navigation("IngredientSupplyRequestDetails");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.Navigation("IngredientTransactions");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderResponsibilities");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FOV.Domain.Entities.OrderAggregator.OrderDetail", b =>
                {
                    b.Navigation("OrderResponsibilities");
                });

            modelBuilder.Entity("FOV.Domain.Entities.RestaurantAggregator.Restaurant", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Dishes");

                    b.Navigation("IngredientSupplyRequests");

                    b.Navigation("Ingredients");

                    b.Navigation("ShiftRestaurants");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FOV.Domain.Entities.ShiftAggregator.Shift", b =>
                {
                    b.Navigation("ShiftRestaurants");

                    b.Navigation("WaiterSchedules");
                });

            modelBuilder.Entity("FOV.Domain.Entities.TableAggregator.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FOV.Domain.Entities.UserAggregator.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FOV.Domain.Entities.UserAggregator.User", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Orders");

                    b.Navigation("WaiterSalaries");

                    b.Navigation("WaiterSchedules");
                });

            modelBuilder.Entity("FOV.Domain.Entities.WaiterSalaryAggregator.Salary", b =>
                {
                    b.Navigation("WaiterSalaries");
                });

            modelBuilder.Entity("FOV.Domain.Entities.WaiterScheduleAggregator.WaiterSchedule", b =>
                {
                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}
