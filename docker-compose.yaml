version: '3.8'  # Specify the version of Docker Compose

services:
  fov.presentation:
    container_name: fov_api
    image: ${DOCKER_REGISTRY:-fovpresentation}
    build:
      context: .
      dockerfile: src/FOV.Presentation/Dockerfile
    depends_on:
      - database
      - redis
    ports:
      - "5000:5000"
      - "5001:5001"
      - "8080:8080"
      - "8081:8081"
    environment:
      - TZ=Etc/UTC  # Set timezone
      - CONNECTIONSTRINGS__PostgresConnection=Host=fov_database;Port=5432;Database=RestaurantManagementDatabase;Username=admin;Password=admin;
      - CONNECTIONSTRINGS__RedisConnection=redis:6379
    volumes:
      - data-protection-keys:/home/app/.aspnet/DataProtection-Keys
    networks:
      - fov_network

  database:
    image: postgres:15
    container_name: fov_database
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: RestaurantManagementDatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - fov_network

  redis:
    image: redis:7.0.12
    container_name: redis-cache
    ports:
      - "6380:6379"
    networks:
      - fov_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - fov_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - fov_network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  elasticsearch:
    container_name: els
    image: elasticsearch:8.15.0
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - fov_network

  kibana:
    container_name: kibana
    image: kibana:8.15.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - fov_network

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      - sonarqube_db
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube_db:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - fov_network

  sonarqube_db:
    image: postgres:15
    container_name: sonarqube_db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    networks:
      - fov_network

networks:
  fov_network:
    driver: bridge

volumes:
  postgres_data: {}
  elasticsearch-data: {}
  data-protection-keys: {}
  sonarqube_data: {}
  sonarqube_extensions: {}
  sonarqube_logs: {}
  sonarqube_db_data: {}
