# version: '3.9'

services:
  # FOV Presentation Service
  fov.presentation:
    container_name: fov_api
    image: ${DOCKER_REGISTRY:-fovpresentation}
    build:
      context: .
      dockerfile: src/FOV.Presentation/Dockerfile
    depends_on:
      - database
      - redis
    ports:
      - "8080:8080"
    environment:
      - TZ=Etc/UTC
      - CONNECTIONSTRINGS__PostgresConnection=Host=dpg-ctd6q99u0jms73f3bmjg-a.singapore-postgres.render.com;Port=5432;Database=vrom_db;Username=vrom_db_user;Password=PetEBNZhmP9sYFiyrBAEgmPariwvsp7r;
      - CONNECTIONSTRINGS__RedisConnection=redis:6379
    volumes:
      - data-protection-keys:/home/app/.aspnet/DataProtection-Keys
    networks:
      - fov_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
        reservations:
          memory: 256M
          cpus: "0.25"


  # PostgreSQL Database for FOV
  database:
    image: postgres:15
    container_name: fov_database
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: RestaurantManagementDatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - fov_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Redis Cache
  redis:
    image: redis:7.0.12
    container_name: redis-cache
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data  # Persistent storage for Redis
    networks:
      - fov_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.50"
        reservations:
          memory: 128M
          cpus: "0.25"
  
  redis-exporter:
    image: bitnami/redis-exporter:latest
    container_name: redis-exporter
    environment:
      REDIS_ADDRESS: redis:6379  # Connect to your Redis container
    ports:
      - "9121:9121"  # Redis Exporter metrics exposed on port 9121
    networks:
      - fov_network
    depends_on:
      - redis
  # Prometheus for Monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Use a named volume here
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - fov_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.50"
        reservations:
          memory: 128M
          cpus: "0.25"



  grafana:
   image: grafana/grafana:latest
   container_name: grafana
   ports:
     - "3000:3000"
   networks:
     - fov_network
   environment:
     - GF_SECURITY_ADMIN_USER=admin
     - GF_SECURITY_ADMIN_PASSWORD=admin
     - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
   volumes:
     - grafana_data:/grafana
     - ./grafana/provisioning/:/etc/grafana/provisioning
   env_file:
     - ./grafana/config.monitoring
   user: "472"  # Run the container as the Grafana user
   deploy:
     resources:
       limits:
         memory: 256M
         cpus: "0.50"
       reservations:
         memory: 128M
         cpus: "0.25"

  


  # SonarQube for Code Quality
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      - sonarqube_db
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube_db:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - fov_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # PostgreSQL Database for SonarQube
  sonarqube_db:
    image: postgres:15
    container_name: sonarqube_db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    networks:
      - fov_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"



networks:
  fov_network:
    driver: bridge

volumes:
  postgres_data: {}  # PostgreSQL data persistence
  redis_data: {}  # Redis data persistence (optional)
  data-protection-keys: {}  # ASP.NET data protection keys
  sonarqube_data: {}  # SonarQube data persistence
  sonarqube_extensions: {}  # SonarQube plugins
  sonarqube_logs: {}  # SonarQube logs
  sonarqube_db_data: {}  # PostgreSQL data for SonarQube
  prometheus_data: {}
  grafana_data: {}
